<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="3" passed="2" failed="1" skipped="0">
  <reporter-output>
    <line>
      <![CDATA[TestvalidLoginis failtrue]]>
    </line>
    <line>
      <![CDATA[TestvalidLoginis passtrue]]>
    </line>
    <line>
      <![CDATA[homepage is displayed]]>
    </line>
    <line>
      <![CDATA[TestvalidLoginis passtrue]]>
    </line>
  </reporter-output>
  <suite started-at="2019-12-02T14:08:48 IST" name="Suite" finished-at="2019-12-02T14:10:05 IST" duration-ms="76878">
    <groups>
    </groups>
    <test started-at="2019-12-02T14:08:48 IST" name="Test" finished-at="2019-12-02T14:10:05 IST" duration-ms="76878">
      <class name="script.Invalidlogin">
        <test-method is-config="true" signature="openApp()[pri:0, instance:script.Invalidlogin@3d121db3]" started-at="2019-12-02T14:08:48 IST" name="openApp" finished-at="2019-12-02T14:09:03 IST" duration-ms="14907" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApp -->
        <test-method signature="validLogin()[pri:0, instance:script.Invalidlogin@3d121db3]" started-at="2019-12-02T14:09:03 IST" name="validLogin" finished-at="2019-12-02T14:09:11 IST" duration-ms="8520" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at page.LoginPage.verifyerrmsgisDisplayed(LoginPage.java:38)
at script.Invalidlogin.validLogin(Invalidlogin.java:22)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validLogin -->
        <test-method is-config="true" signature="closeApp(org.testng.ITestResult)[pri:0, instance:script.Invalidlogin@3d121db3]" started-at="2019-12-02T14:09:11 IST" name="closeApp" finished-at="2019-12-02T14:09:12 IST" duration-ms="1210" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validLogin status=FAILURE method=Invalidlogin.validLogin()[pri:0, instance:script.Invalidlogin@3d121db3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[TestvalidLoginis failtrue]]>
            </line>
          </reporter-output>
        </test-method> <!-- closeApp -->
      </class> <!-- script.Invalidlogin -->
      <class name="script.InvalidLogins">
        <test-method is-config="true" signature="openApp()[pri:0, instance:script.InvalidLogins@3b07a0d6]" started-at="2019-12-02T14:09:12 IST" name="openApp" finished-at="2019-12-02T14:09:25 IST" duration-ms="12317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApp -->
        <test-method signature="validLogin()[pri:0, instance:script.InvalidLogins@3b07a0d6]" started-at="2019-12-02T14:09:25 IST" name="validLogin" finished-at="2019-12-02T14:09:43 IST" duration-ms="18350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validLogin -->
        <test-method is-config="true" signature="closeApp(org.testng.ITestResult)[pri:0, instance:script.InvalidLogins@3b07a0d6]" started-at="2019-12-02T14:09:43 IST" name="closeApp" finished-at="2019-12-02T14:09:43 IST" duration-ms="238" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validLogin status=SUCCESS method=InvalidLogins.validLogin()[pri:0, instance:script.InvalidLogins@3b07a0d6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[TestvalidLoginis passtrue]]>
            </line>
          </reporter-output>
        </test-method> <!-- closeApp -->
      </class> <!-- script.InvalidLogins -->
      <class name="script.TestValidLogin">
        <test-method is-config="true" signature="openApp()[pri:0, instance:script.TestValidLogin@11a9e7c8]" started-at="2019-12-02T14:09:43 IST" name="openApp" finished-at="2019-12-02T14:09:56 IST" duration-ms="12177" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApp -->
        <test-method signature="validLogin()[pri:0, instance:script.TestValidLogin@11a9e7c8]" started-at="2019-12-02T14:09:56 IST" name="validLogin" finished-at="2019-12-02T14:10:02 IST" duration-ms="6854" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[homepage is displayed]]>
            </line>
          </reporter-output>
        </test-method> <!-- validLogin -->
        <test-method is-config="true" signature="closeApp(org.testng.ITestResult)[pri:0, instance:script.TestValidLogin@11a9e7c8]" started-at="2019-12-02T14:10:02 IST" name="closeApp" finished-at="2019-12-02T14:10:05 IST" duration-ms="2170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validLogin status=SUCCESS method=TestValidLogin.validLogin()[pri:0, instance:script.TestValidLogin@11a9e7c8] output=homepage is displayed]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[TestvalidLoginis passtrue]]>
            </line>
          </reporter-output>
        </test-method> <!-- closeApp -->
      </class> <!-- script.TestValidLogin -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
